def print_board(board):
    """
    Prints the current state of the Tic Tac Toe board.
    """
    for row in board:
        print(" | ".join(row))
        print("-" * 9)


def check_winner(board, player):
    """
    Checks if a player has won the game.
    """
    # Check rows, columns, and diagonals
    for i in range(3):
        if all([board[i][j] == player for j in range(3)]) or all([board[j][i] == player for j in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False


def is_draw(board):
    """
    Checks if the game is a draw (no empty spaces left).
    """
    return all([cell != " " for row in board for cell in row])


def tic_tac_toe():
    """
    Main function to play the Tic Tac Toe game.
    """
    board = [[" " for _ in range(3)] for _ in range(3)]
    players = ["X", "O"]
    current_player = 0

    print("Welcome to Tic Tac Toe!")
    print_board(board)

    while True:
        print(f"Player {players[current_player]}'s turn.")
        try:
            row, col = map(int, input("Enter row and column (0, 1, or 2 separated by space): ").split())
        except ValueError:
            print("Invalid input. Please enter two numbers separated by a space.")
            continue

        # Validate move
        if 0 <= row < 3 and 0 <= col < 3 and board[row][col] == " ":
            board[row][col] = players[current_player]
            print_board(board)

            # Check for winner or draw
            if check_winner(board, players[current_player]):
                print(f"Player {players[current_player]} wins!")
                break
            if is_draw(board):
                print("It's a draw!")
                break

            # Switch player
            current_player = 1 - current_player
        else:
            print("Invalid move. Try again.")

if __name__ == "__main__":
    tic_tac_toe()
